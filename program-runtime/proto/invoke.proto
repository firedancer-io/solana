syntax = "proto3";
package org.solana.sealevel.v1;

// A set of feature flags.
message FeatureSet {
  // Every item in this list marks an enabled feature.  The value of
  // each item is the first 8 bytes of the feature ID as a little-
  // endian integer.
  repeated fixed64 features = 1;
}

// The complete state of an account excluding its public key.
message AcctState {
  // The account address.  (32 bytes)
  bytes address = 1;

  uint64 lamports = 2;

  // Account data is limited to 10 MiB on Solana mainnet as of 2024-Feb.
  bytes data = 3;

  bool executable = 4;

  // The rent epoch is deprecated on Solana mainnet as of 2024-Feb.
  // If ommitted, implies a value of UINT64_MAX.
  uint64 rent_epoch = 5;

  // Address of the program that owns this account.  (32 bytes)
  bytes owner = 6;
}

// EpochContext includes context scoped to an epoch.
// On "real" ledgers, it is created during the epoch boundary.
message EpochContext {
  FeatureSet features = 1;
}

// SlotContext includes context scoped to a block.
// On "real" ledgers, it is created during the slot boundary.
message SlotContext {}

message TxnContext {}

message InstrAcct {
  // Selects an account in an external list
  uint32 index = 1;
  bool is_writable = 2;
  bool is_signer = 3;
}

// The execution context of a program invocation (aka instruction).
// Contains all required information to independently replay an instruction.
// Also includes partial transaction context.
message InstrContext {
  // The address of the program invoked.  (32 bytes)
  bytes program_id = 1;

  // Account state accessed by the instruction.  This may include
  // indirect accesses like sysvars.
  repeated AcctState accounts = 3;

  // Account access list for this instruction (refers to above accounts list)
  repeated InstrAcct instr_accounts = 4;

  // The input data passed to program execution.
  bytes data = 5;

  uint64 cu_avail = 6;

  TxnContext txn_context = 7;
  SlotContext slot_context = 8;
  EpochContext epoch_context = 9;
}
